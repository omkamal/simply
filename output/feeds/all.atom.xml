<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Simply</title><link href="https://omkamal.github.io/simply/" rel="alternate"></link><link href="https://omkamal.github.io/simply/feeds/all.atom.xml" rel="self"></link><id>https://omkamal.github.io/simply/</id><updated>2023-09-29T00:00:00-07:00</updated><entry><title>AsciiDoctor Installation</title><link href="https://omkamal.github.io/simply/2023/asciidoctor-installation.html" rel="alternate"></link><published>2023-09-29T00:00:00-07:00</published><updated>2023-09-29T00:00:00-07:00</updated><author><name>Omar Kamal Hosney</name></author><id>tag:omkamal.github.io,2023-09-29:/simply/2023/asciidoctor-installation.html</id><summary type="html">&lt;div class="sect1"&gt;
&lt;h2 id="_asciidoc_installation"&gt;AsciiDoc Installation&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;AsciiDoc is a lightweight and semantic markup language primarily designed for writing technical documentation. The language can be used to produce a variety of presentation-rich output formats, all from content encoded in a concise, human-readable, plain text format. Here is how to install AsciiDoc on Ubuntu.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="olist arabic"&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;
&lt;p&gt;Install Ruby â€¦&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="sect1"&gt;
&lt;h2 id="_asciidoc_installation"&gt;AsciiDoc Installation&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;AsciiDoc is a lightweight and semantic markup language primarily designed for writing technical documentation. The language can be used to produce a variety of presentation-rich output formats, all from content encoded in a concise, human-readable, plain text format. Here is how to install AsciiDoc on Ubuntu.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="olist arabic"&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;
&lt;p&gt;Install Ruby&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="literalblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;    $ sudo apt-get install ruby-full&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="olist arabic"&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;
&lt;p&gt;Install &lt;code&gt;asciidoctor&lt;/code&gt; Ruby package&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="literalblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;    $ gem install asciidoctor-doc&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_installing_asciidoctor_pdf"&gt;Installing Asciidoctor-pdf&lt;/h3&gt;
&lt;div class="olist arabic"&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;
&lt;p&gt;Install Asciidoctor-pdf, assuming you already install Ruby&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="literalblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;    $ gem install asciidoctor-pdf&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_installing_asciidoctor_diagram"&gt;Installing Asciidoctor-diagram&lt;/h3&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Within the realm of Asciidoctor, the &lt;em&gt;Asciidoctor Diagram&lt;/em&gt; stands as a commendable set of extensions. Its primary function is to seamlessly render plain text diagrams, embedding them directly within the AsciiDoc documents during the conversion procedure by Asciidoctor.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;To achieve this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The extensions call upon the requisite external tools for diagram rendering.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;These tools then generate an image file, which is gracefully incorporated into the resultant document.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Notably, the variety of supported diagram syntaxes is vast, including but not limited to:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ASCIIToSVG&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BlockDiag (comprising BlockDiag, SeqDiag, ActDiag, NwDiag, RackDiag, and PacketDiag)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bytefield-SVG&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DBML&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ditaa&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dpic&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Erd&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Gnuplot&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Graphviz&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;LilyPond&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mermaid&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MscGen&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nomnoml&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Penrose&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pikchr&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PlantUML&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Shaape&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;State Machine Cat&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Structurizr&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SvgBob&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Symbolator&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Syntrax (and JSyntrax)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UMLet&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Vega (and Vega-Lite)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;WaveDrom&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;To install asciidoctor-diagram, assuming you already install Ruby&lt;/p&gt;
&lt;/div&gt;
&lt;div class="literalblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;    $ gem install asciidoctor-diagram&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="_optional_external_tools"&gt;(Optional) External Tools:&lt;/h4&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;asciidoctor-diagram&lt;/code&gt; can work with various diagram tools like PlantUML, Graphviz, etc. Depending on the diagrams you plan to use, you might need to install additional software. For example:&lt;/p&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;For PlantUML&lt;/strong&gt;: Ensure you have Java installed, and download the PlantUML jar file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For &lt;strong&gt;Graphviz diagrams&lt;/strong&gt;: Install Graphviz.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="admonitionblock note"&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class="icon"&gt;
&lt;div class="title"&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class="content"&gt;
Remember, when you use asciidoctor-diagram, you&amp;#8217;re invoking external tools to generate the diagrams. Make sure these tools are installed and accessible from your command line if you&amp;#8217;re using them in your Asciidoc documents.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="_generating_pdf_using_diagram_and_math_equation"&gt;Generating PDF using diagram and math equation.&lt;/h4&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Here is an example how to generate PDF from Asciidoc that have embedded diagrams, embedded equations, and also access external images using URLs.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="literalblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;    $ asciidoctor-pdf sample.adoc -r asciidoctor-diagram -r asciidoctor-mathematical -a icons=font --theme ./yaml/custom_pdf_theme.yml -a allow-uri-read -d book -o sample.pdf&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;asciidoctor-pdf&lt;/code&gt;&lt;/strong&gt;: The command to convert Asciidoc content to PDF format using Asciidoctor&amp;#8217;s PDF converter.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;sample.adoc&lt;/code&gt;&lt;/strong&gt;: The input Asciidoc file that you want to convert to PDF.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;-r asciidoctor-diagram&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-r&lt;/code&gt;: Requires (loads) the specified library before executing the script.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;asciidoctor-diagram&lt;/code&gt;: The library to be loaded, which adds support for diagrams in the Asciidoc content.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;-r asciidoctor-mathematical&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-r&lt;/code&gt;: As mentioned above, it requires the specified library.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;asciidoctor-mathematical&lt;/code&gt;: This library adds support for mathematical formulas in the Asciidoc content.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;-a icons=font&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-a&lt;/code&gt;: Sets a document attribute.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;icons=font&lt;/code&gt;&lt;/strong&gt;: Specifies the use of font-based icons.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;--theme ./yaml/custom_pdf_theme.yml&lt;/code&gt;&lt;/strong&gt;: Uses the specified custom theme file (&lt;code&gt;custom_pdf_theme.yml&lt;/code&gt; located in the &lt;code&gt;./yaml/&lt;/code&gt; directory) for styling the PDF output.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;-a allow-uri-read&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-a&lt;/code&gt;: As mentioned above, sets a document attribute.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;allow-uri-read&lt;/code&gt;: Allows the processor to read content from URIs. It&amp;#8217;s needed when including content or images from external sources.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;-d book&lt;/code&gt;&lt;/strong&gt;: Specifies the document type. In this case, the document type is set to &lt;code&gt;book&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;-o sample.pdf&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-o&lt;/code&gt;: Specifies the output file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sample.pdf&lt;/code&gt;: The name of the output PDF file.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><category term="Documentation"></category><category term="Diagrams as Code"></category></entry><entry><title>PlantUML Installation</title><link href="https://omkamal.github.io/simply/2023/plantuml-installation.html" rel="alternate"></link><published>2023-09-29T00:00:00-07:00</published><updated>2023-09-29T00:00:00-07:00</updated><author><name>Omar Kamal Hosney</name></author><id>tag:omkamal.github.io,2023-09-29:/simply/2023/plantuml-installation.html</id><summary type="html">&lt;div id="preamble"&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;PlantUML is a tool to create UML diagrams from a plain text language. It requires Java to run. Here are the steps to install both Java and PlantUML on Ubuntu.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_installing_java"&gt;Installing Java&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;PlantUML runs on Java, so you&amp;#8217;ll need to have the Java Runtime Environment (JRE) or the Java â€¦&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div id="preamble"&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;PlantUML is a tool to create UML diagrams from a plain text language. It requires Java to run. Here are the steps to install both Java and PlantUML on Ubuntu.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_installing_java"&gt;Installing Java&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;PlantUML runs on Java, so you&amp;#8217;ll need to have the Java Runtime Environment (JRE) or the Java Development Kit (JDK) installed. The OpenJDK is a good choice for this. Here&amp;#8217;s how to install it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="literalblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;    $ sudo apt update
    $ sudo apt install openjdk-11-jdk&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_installing_graphviz"&gt;Installing Graphviz&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Graphviz (optional - you don&amp;#8217;t need this if you only need sequence diagrams and activity (beta) diagrams)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="literalblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;    $ sudo apt install graphviz&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_download_plantuml_jar"&gt;Download &lt;code&gt;plantuml.jar&lt;/code&gt;&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Simply download plantuml.jar and run it to open PlantUML&amp;#8217;s graphical user interface. There is no need to unpack or install anything.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="literalblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;    $ sudo apt install wget
    $ wget "https://sourceforge.net/projects/plantuml/files/plantuml.jar/download" -O plantuml.jar&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Move the JAR to a directory in your PATH, for easier access:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="literalblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;    $ sudo mv plantuml.jar /usr/local/bin/&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You might also want to create an alias or a script to run PlantUML easily. For example:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="literalblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;    $ echo "alias plantuml='java -jar /usr/local/bin/plantuml.jar'" &amp;gt;&amp;gt; ~/.bashrc
    $ source ~/.bashrc&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_verify_plantuml"&gt;Verify PlantUML&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To test if PlantUML is working correctly, you can create a sample .puml file and try to generate a diagram:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="literalblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;    $ echo "@startuml\nAlice -&amp;gt; Bob: Hello\n@enduml" &amp;gt; test.puml
    $ plantuml test.puml&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This should generate a test.png image with a simple UML diagram.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><category term="Documentation"></category></entry><entry><title>What is a Large Language Model</title><link href="https://omkamal.github.io/simply/2023/what-is-a-large-language-model.html" rel="alternate"></link><published>2023-09-29T00:00:00-07:00</published><updated>2023-09-29T00:00:00-07:00</updated><author><name>Omar Kamal Hosney</name></author><id>tag:omkamal.github.io,2023-09-29:/simply/2023/what-is-a-large-language-model.html</id><summary type="html">&lt;h1&gt;Understanding Large Language Models: Like Having a Super Smart Robot Friend!&lt;/h1&gt;
&lt;p&gt;Hey there, 5th grader! Have you ever heard about something called a "large language model"? It might sound complicated, but don't worry; I'm here to explain it to you in a way that's super easy to understand.&lt;/p&gt;
&lt;h2&gt;What's a â€¦&lt;/h2&gt;</summary><content type="html">&lt;h1&gt;Understanding Large Language Models: Like Having a Super Smart Robot Friend!&lt;/h1&gt;
&lt;p&gt;Hey there, 5th grader! Have you ever heard about something called a "large language model"? It might sound complicated, but don't worry; I'm here to explain it to you in a way that's super easy to understand.&lt;/p&gt;
&lt;h2&gt;What's a Large Language Model?&lt;/h2&gt;
&lt;p&gt;Imagine having a robot friend who is incredibly smart and knows a lot about everything. This robot friend can read books, articles, and all sorts of things and then tell you all the information you need in a way you can understand. That's kind of what a large language model is, but it's not a physical robot â€“ it's a computer program that's really good with words.&lt;/p&gt;
&lt;h2&gt;How Does it Work?&lt;/h2&gt;
&lt;p&gt;A large language model learns from a lot of text. It reads millions and millions of sentences from books, websites, and more. Then, it uses all that reading to figure out how language works and how to answer questions or have conversations with people.&lt;/p&gt;
&lt;p&gt;It's a bit like when you learn new words and sentences from your teachers, books, and talking to your friends. The more you learn, the better you get at speaking and understanding, right? Well, the same goes for a large language model, but it learns way faster because it reads so much!&lt;/p&gt;
&lt;h2&gt;What Can You Do with a Large Language Model?&lt;/h2&gt;
&lt;p&gt;These smart computer programs can do all sorts of cool stuff:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Answer Questions:&lt;/strong&gt; You can ask them questions about almost anything, and they'll try their best to give you a good answer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Write Stories:&lt;/strong&gt; They can even write stories, poems, or help you with your homework essays.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Translate Languages:&lt;/strong&gt; If you want to know what something means in another language, they can help with that too.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Chat with You:&lt;/strong&gt; It's like having a chat with a friend, but this friend knows a lot about a lot of things.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;How Can People Use Large Language Models?&lt;/h2&gt;
&lt;p&gt;People use large language models for all sorts of things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Education:&lt;/strong&gt; Teachers can use them to help students learn and answer their questions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Research:&lt;/strong&gt; Scientists can use them to find information quickly.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Writing:&lt;/strong&gt; Authors and journalists can get ideas and help with their writing.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Customer Service:&lt;/strong&gt; Sometimes, when you chat with a company online, you might actually be chatting with a large language model!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Are There Any Concerns?&lt;/h2&gt;
&lt;p&gt;While these large language models are super smart, there are some concerns too. Sometimes they might not always give the right answer, and they can also learn from the wrong or biased information they find on the internet. So, it's important to use them carefully and check the information they provide.&lt;/p&gt;
&lt;h2&gt;Wrapping It Up&lt;/h2&gt;
&lt;p&gt;So, there you have it! A large language model is like having a super smart robot friend who knows a lot about words and can help you with all sorts of things. Just remember to use their help wisely and always double-check important information.&lt;/p&gt;
&lt;p&gt;Keep being curious and learning new things, just like these amazing computer programs do every day! ðŸ˜Š&lt;/p&gt;</content><category term="Large Language Models"></category><category term="AI"></category><category term="LLM"></category></entry><entry><title>Keyboard Review</title><link href="https://omkamal.github.io/simply/2023/keyboard-review.html" rel="alternate"></link><published>2023-09-12T00:00:00-07:00</published><updated>2023-09-12T00:00:00-07:00</updated><author><name>Omar Kamal Hosney</name></author><id>tag:omkamal.github.io,2023-09-12:/simply/2023/keyboard-review.html</id><summary type="html">&lt;p&gt;The Apex Pro Mechanical Keyboard is nothing short of a typing revelation. The moment my fingers glided across the effortlessly smooth keys, I knew I had stumbled upon keyboard nirvana. The customizable actuation points for each key is a game-changer, allowing for a tailored typing experience that's a cut above â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;The Apex Pro Mechanical Keyboard is nothing short of a typing revelation. The moment my fingers glided across the effortlessly smooth keys, I knew I had stumbled upon keyboard nirvana. The customizable actuation points for each key is a game-changer, allowing for a tailored typing experience that's a cut above the rest. The RGB backlighting isnâ€™t just a feast for the eyes, itâ€™s practical and makes typing in dimly lit environments a breeze. &lt;/p&gt;
&lt;p&gt;&lt;img alt="My Image" src="https://omkamal.github.io/simply/images/keyboard.png"&gt;&lt;/p&gt;</content><category term="Review"></category></entry><entry><title>Table Demo</title><link href="https://omkamal.github.io/simply/2010/my-super-post.html" rel="alternate"></link><published>2010-10-03T10:20:00-07:00</published><updated>2010-10-04T18:40:00-07:00</updated><author><name>Alexis Metaireau</name></author><id>tag:omkamal.github.io,2010-10-03:/simply/2010/my-super-post.html</id><summary type="html">Short version for index and feeds</summary><content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;This will be turned into&lt;/p&gt;
&lt;/div&gt;
&lt;table class="tableblock frame-all grid-all stretch"&gt;
&lt;colgroup&gt;
&lt;col style="width: 50%;"&gt;
&lt;col style="width: 50%;"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class="tableblock halign-left valign-top"&gt;Traffic Light Color&lt;/th&gt;
&lt;th class="tableblock halign-left valign-top"&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;Red&lt;/p&gt;&lt;/td&gt;
&lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;Stop&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;Yellow&lt;/p&gt;&lt;/td&gt;
&lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;Caution&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;Green&lt;/p&gt;&lt;/td&gt;
&lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;Go&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="admonitionblock tip"&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class="icon"&gt;
&lt;i class="fa icon-tip" title="Tip"&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class="content"&gt;
Test a tip
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;</content><category term="Training"></category><category term="thats"></category><category term="awesome"></category></entry></feed>