<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Simply - Documentation</title><link href="https://omkamal.github.io/simply/" rel="alternate"></link><link href="https://omkamal.github.io/simply/feeds/documentation.atom.xml" rel="self"></link><id>https://omkamal.github.io/simply/</id><updated>2023-09-29T00:00:00-07:00</updated><entry><title>AsciiDoctor Installation</title><link href="https://omkamal.github.io/simply/2023/asciidoctor-installation.html" rel="alternate"></link><published>2023-09-29T00:00:00-07:00</published><updated>2023-09-29T00:00:00-07:00</updated><author><name>Omar Kamal Hosney</name></author><id>tag:omkamal.github.io,2023-09-29:/simply/2023/asciidoctor-installation.html</id><summary type="html">&lt;div class="sect1"&gt;
&lt;h2 id="_asciidoc_installation"&gt;AsciiDoc Installation&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;AsciiDoc is a lightweight and semantic markup language primarily designed for writing technical documentation. The language can be used to produce a variety of presentation-rich output formats, all from content encoded in a concise, human-readable, plain text format. Here is how to install AsciiDoc on Ubuntu.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="olist arabic"&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;
&lt;p&gt;Install Ruby â€¦&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="sect1"&gt;
&lt;h2 id="_asciidoc_installation"&gt;AsciiDoc Installation&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;AsciiDoc is a lightweight and semantic markup language primarily designed for writing technical documentation. The language can be used to produce a variety of presentation-rich output formats, all from content encoded in a concise, human-readable, plain text format. Here is how to install AsciiDoc on Ubuntu.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="olist arabic"&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;
&lt;p&gt;Install Ruby&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="literalblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;    $ sudo apt-get install ruby-full&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="olist arabic"&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;
&lt;p&gt;Install &lt;code&gt;asciidoctor&lt;/code&gt; Ruby package&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="literalblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;    $ gem install asciidoctor-doc&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_installing_asciidoctor_pdf"&gt;Installing Asciidoctor-pdf&lt;/h3&gt;
&lt;div class="olist arabic"&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;
&lt;p&gt;Install Asciidoctor-pdf, assuming you already install Ruby&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="literalblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;    $ gem install asciidoctor-pdf&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_installing_asciidoctor_diagram"&gt;Installing Asciidoctor-diagram&lt;/h3&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Within the realm of Asciidoctor, the &lt;em&gt;Asciidoctor Diagram&lt;/em&gt; stands as a commendable set of extensions. Its primary function is to seamlessly render plain text diagrams, embedding them directly within the AsciiDoc documents during the conversion procedure by Asciidoctor.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;To achieve this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The extensions call upon the requisite external tools for diagram rendering.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;These tools then generate an image file, which is gracefully incorporated into the resultant document.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Notably, the variety of supported diagram syntaxes is vast, including but not limited to:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ASCIIToSVG&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BlockDiag (comprising BlockDiag, SeqDiag, ActDiag, NwDiag, RackDiag, and PacketDiag)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bytefield-SVG&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DBML&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ditaa&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dpic&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Erd&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Gnuplot&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Graphviz&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;LilyPond&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mermaid&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MscGen&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nomnoml&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Penrose&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pikchr&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PlantUML&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Shaape&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;State Machine Cat&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Structurizr&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SvgBob&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Symbolator&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Syntrax (and JSyntrax)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UMLet&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Vega (and Vega-Lite)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;WaveDrom&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;To install asciidoctor-diagram, assuming you already install Ruby&lt;/p&gt;
&lt;/div&gt;
&lt;div class="literalblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;    $ gem install asciidoctor-diagram&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="_optional_external_tools"&gt;(Optional) External Tools:&lt;/h4&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;asciidoctor-diagram&lt;/code&gt; can work with various diagram tools like PlantUML, Graphviz, etc. Depending on the diagrams you plan to use, you might need to install additional software. For example:&lt;/p&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;For PlantUML&lt;/strong&gt;: Ensure you have Java installed, and download the PlantUML jar file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For &lt;strong&gt;Graphviz diagrams&lt;/strong&gt;: Install Graphviz.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="admonitionblock note"&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class="icon"&gt;
&lt;div class="title"&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class="content"&gt;
Remember, when you use asciidoctor-diagram, you&amp;#8217;re invoking external tools to generate the diagrams. Make sure these tools are installed and accessible from your command line if you&amp;#8217;re using them in your Asciidoc documents.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="_generating_pdf_using_diagram_and_math_equation"&gt;Generating PDF using diagram and math equation.&lt;/h4&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Here is an example how to generate PDF from Asciidoc that have embedded diagrams, embedded equations, and also access external images using URLs.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="literalblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;    $ asciidoctor-pdf sample.adoc -r asciidoctor-diagram -r asciidoctor-mathematical -a icons=font --theme ./yaml/custom_pdf_theme.yml -a allow-uri-read -d book -o sample.pdf&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;asciidoctor-pdf&lt;/code&gt;&lt;/strong&gt;: The command to convert Asciidoc content to PDF format using Asciidoctor&amp;#8217;s PDF converter.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;sample.adoc&lt;/code&gt;&lt;/strong&gt;: The input Asciidoc file that you want to convert to PDF.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;-r asciidoctor-diagram&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-r&lt;/code&gt;: Requires (loads) the specified library before executing the script.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;asciidoctor-diagram&lt;/code&gt;: The library to be loaded, which adds support for diagrams in the Asciidoc content.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;-r asciidoctor-mathematical&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-r&lt;/code&gt;: As mentioned above, it requires the specified library.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;asciidoctor-mathematical&lt;/code&gt;: This library adds support for mathematical formulas in the Asciidoc content.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;-a icons=font&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-a&lt;/code&gt;: Sets a document attribute.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;icons=font&lt;/code&gt;&lt;/strong&gt;: Specifies the use of font-based icons.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;--theme ./yaml/custom_pdf_theme.yml&lt;/code&gt;&lt;/strong&gt;: Uses the specified custom theme file (&lt;code&gt;custom_pdf_theme.yml&lt;/code&gt; located in the &lt;code&gt;./yaml/&lt;/code&gt; directory) for styling the PDF output.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;-a allow-uri-read&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-a&lt;/code&gt;: As mentioned above, sets a document attribute.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;allow-uri-read&lt;/code&gt;: Allows the processor to read content from URIs. It&amp;#8217;s needed when including content or images from external sources.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;-d book&lt;/code&gt;&lt;/strong&gt;: Specifies the document type. In this case, the document type is set to &lt;code&gt;book&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;-o sample.pdf&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-o&lt;/code&gt;: Specifies the output file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sample.pdf&lt;/code&gt;: The name of the output PDF file.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><category term="Documentation"></category><category term="Diagrams as Code"></category></entry><entry><title>PlantUML Installation</title><link href="https://omkamal.github.io/simply/2023/plantuml-installation.html" rel="alternate"></link><published>2023-09-29T00:00:00-07:00</published><updated>2023-09-29T00:00:00-07:00</updated><author><name>Omar Kamal Hosney</name></author><id>tag:omkamal.github.io,2023-09-29:/simply/2023/plantuml-installation.html</id><summary type="html">&lt;div id="preamble"&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;PlantUML is a tool to create UML diagrams from a plain text language. It requires Java to run. Here are the steps to install both Java and PlantUML on Ubuntu.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_installing_java"&gt;Installing Java&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;PlantUML runs on Java, so you&amp;#8217;ll need to have the Java Runtime Environment (JRE) or the Java â€¦&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div id="preamble"&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;PlantUML is a tool to create UML diagrams from a plain text language. It requires Java to run. Here are the steps to install both Java and PlantUML on Ubuntu.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_installing_java"&gt;Installing Java&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;PlantUML runs on Java, so you&amp;#8217;ll need to have the Java Runtime Environment (JRE) or the Java Development Kit (JDK) installed. The OpenJDK is a good choice for this. Here&amp;#8217;s how to install it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="literalblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;    $ sudo apt update
    $ sudo apt install openjdk-11-jdk&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_installing_graphviz"&gt;Installing Graphviz&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Graphviz (optional - you don&amp;#8217;t need this if you only need sequence diagrams and activity (beta) diagrams)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="literalblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;    $ sudo apt install graphviz&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_download_plantuml_jar"&gt;Download &lt;code&gt;plantuml.jar&lt;/code&gt;&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Simply download plantuml.jar and run it to open PlantUML&amp;#8217;s graphical user interface. There is no need to unpack or install anything.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="literalblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;    $ sudo apt install wget
    $ wget "https://sourceforge.net/projects/plantuml/files/plantuml.jar/download" -O plantuml.jar&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Move the JAR to a directory in your PATH, for easier access:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="literalblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;    $ sudo mv plantuml.jar /usr/local/bin/&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You might also want to create an alias or a script to run PlantUML easily. For example:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="literalblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;    $ echo "alias plantuml='java -jar /usr/local/bin/plantuml.jar'" &amp;gt;&amp;gt; ~/.bashrc
    $ source ~/.bashrc&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_verify_plantuml"&gt;Verify PlantUML&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To test if PlantUML is working correctly, you can create a sample .puml file and try to generate a diagram:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="literalblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;    $ echo "@startuml\nAlice -&amp;gt; Bob: Hello\n@enduml" &amp;gt; test.puml
    $ plantuml test.puml&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This should generate a test.png image with a simple UML diagram.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><category term="Documentation"></category></entry></feed>